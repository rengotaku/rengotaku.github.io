<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on Vegetable Programing</title>
    <link>https://rengotaku.github.io/tags/bash/</link>
    <description>Recent content in bash on Vegetable Programing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <copyright>©2018-2020 Vegetable Programing.</copyright>
    <lastBuildDate>Thu, 03 Dec 2020 12:22:58 +0900</lastBuildDate><atom:link href="https://rengotaku.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>bashで特定の行を抽出したい</title>
      <link>https://rengotaku.github.io/posts/72f52e45-d8af-4d94-a0da-65a83741cc43/</link>
      <pubDate>Thu, 03 Dec 2020 12:22:58 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/72f52e45-d8af-4d94-a0da-65a83741cc43/</guid>
      <description>３〜６行の間 $ awk &amp;#39;NR &amp;gt;= 3 &amp;amp;&amp;amp; NR &amp;lt;= 6&amp;#39; /path/to/file ２行目から $ awk &amp;#39;NR &amp;gt;= 2&amp;#39; /path/to/file 参考 To print a specific line from a file Using sed</description>
    </item>
    
    <item>
      <title>bash作りで一通りやりたいことしているスクリプト</title>
      <link>https://rengotaku.github.io/posts/8f21c4fe-0f8d-43ff-bf7f-6ba6848bd397/</link>
      <pubDate>Thu, 27 Aug 2020 11:20:04 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/8f21c4fe-0f8d-43ff-bf7f-6ba6848bd397/</guid>
      <description>#!/bin/bash -e script_dir=$(cd $(dirname $0); pwd) #################### # VARIABLES #################### ATHENA_CATALOG=AwsDataCatalog ENVS=(trial staging production) DEFAULT_AWS_PROFILE=hoge #################### # functions #################### containsElement () { local e match=&amp;#34;$1&amp;#34; shift for e; do [[ &amp;#34;$e&amp;#34; == &amp;#34;$match&amp;#34; ]] &amp;amp;&amp;amp; return; done echo &amp;#34;n&amp;#34; } #################### # usage #################### cmdname=`basename $0` function usage() { echo &amp;#34;Usage: ${cmdname}env [OPTIONS]&amp;#34; echo &amp;#34;&amp;#34; echo &amp;#34;env: ${ENVS[@]}&amp;#34; echo &amp;#34;OPTIONS:&amp;#34; echo &amp;#34; --profile name, aws profile, default &amp;#39;$DEFAULT_AWS_PROFILE&amp;#39;.&amp;#34; echo &amp;#34;&amp;#34;</description>
    </item>
    
    <item>
      <title>Sentryへの通知があったあたりのログをcloudwatchから取得する</title>
      <link>https://rengotaku.github.io/posts/d78e5591-d64e-4b11-9410-4342922d7728/</link>
      <pubDate>Wed, 29 Jul 2020 19:37:09 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/d78e5591-d64e-4b11-9410-4342922d7728/</guid>
      <description>ソース ※awslogsが4/11/2020 04:50の形式で検索が上手く行かない。 function detecte_log { EXPAND_SECONDS=10 if [ &amp;#34;$#&amp;#34; -ne 1 ]; then echo &amp;#34;Need time such as &amp;#39;July 29 2020 17:24:07 JST&amp;#39;&amp;#34; exit 1 fi occured_time=$1 start_time=`date +&amp;#34;%d/%m/%Y %T&amp;#34; --utc</description>
    </item>
    
    <item>
      <title>bashでdotenv</title>
      <link>https://rengotaku.github.io/posts/fa552802-a5ff-4313-8cd1-4712f06d29d1/</link>
      <pubDate>Wed, 08 Jul 2020 09:28:36 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/fa552802-a5ff-4313-8cd1-4712f06d29d1/</guid>
      <description>MY_VAR=$(grep MY_VAR .env | cut -d &#39;=&#39; -f 2-) Parse a .env (dotenv) file directly using BASH</description>
    </item>
    
    <item>
      <title>macで昨日日付を取得したい</title>
      <link>https://rengotaku.github.io/posts/5ec56dc2-9091-4aa2-ae9e-f214aba36901/</link>
      <pubDate>Fri, 08 May 2020 09:44:57 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/5ec56dc2-9091-4aa2-ae9e-f214aba36901/</guid>
      <description>解決 date -v-1d +%F を使用する Get yesterday&amp;rsquo;s date in bash on Linux, DST-safe - Stack Overflow</description>
    </item>
    
    <item>
      <title>bashでファイルをウォッチしたい</title>
      <link>https://rengotaku.github.io/posts/ba4099fe-9000-489b-94d5-211f89d11750/</link>
      <pubDate>Fri, 13 Mar 2020 15:46:51 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/ba4099fe-9000-489b-94d5-211f89d11750/</guid>
      <description>#!/bin/bash FILE=&amp;#34;$1&amp;#34; CMD=&amp;#34;$2&amp;#34; LAST=`ls -l &amp;#34;$FILE&amp;#34;` while true; do sleep 1 NEW=`ls -l &amp;#34;$FILE&amp;#34;` if [ &amp;#34;$NEW&amp;#34; != &amp;#34;$LAST&amp;#34; ]; then &amp;#34;$CMD&amp;#34; &amp;#34;$FILE&amp;#34; LAST=&amp;#34;$NEW&amp;#34; fi done linux - Shell command to monitor changes in a file - Server Fault mac では `sleep 1m` は機能しない。秒数のみ。 Linuxコマンド【 sleep 】指定</description>
    </item>
    
    <item>
      <title>bashの特異な書き方集</title>
      <link>https://rengotaku.github.io/posts/0481bf97-bb64-404e-ade8-1073e7cbeee5/</link>
      <pubDate>Thu, 20 Feb 2020 09:24:01 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/0481bf97-bb64-404e-ade8-1073e7cbeee5/</guid>
      <description>ファイル作成 touch の代わりに &amp;gt; を使用する。 $ cd lib &amp;amp;&amp;amp; &amp;gt; my_gem.rb Create a Simple Ruby Gem - The Startup - Medium 標準出力に文字を渡す echo の代わりに &amp;lt;&amp;lt;&amp;lt; を使用する。 $ cat &amp;lt;&amp;lt;&amp;lt; &amp;#39;hi there&amp;#39; 理解できていな</description>
    </item>
    
    <item>
      <title>ポートを使用しているアプリケーションを特定したい</title>
      <link>https://rengotaku.github.io/posts/5ba8c531-d5c3-4b59-a090-979105b01b4e/</link>
      <pubDate>Wed, 12 Feb 2020 17:23:49 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/5ba8c531-d5c3-4b59-a090-979105b01b4e/</guid>
      <description>lsof $ sudo lsof -i -P -n | grep LISTEN systemd 1 root 48u IPv6 11587 0t0 TCP *:111 (LISTEN) systemd 1 root 49u IPv4 11588 0t0 TCP *:111 (LISTEN) sshd 877 root 3u IPv4 15738 0t0 TCP *:58343 (LISTEN) sshd 877 root 4u IPv6 15747 0t0 TCP *:58343 (LISTEN) master 996 root 13u IPv4 16530 0t0 TCP 127.0.0.1:25 (LISTEN) master 996 root 14u IPv6 16531 0t0 TCP [::1]:25 (LISTEN)</description>
    </item>
    
    <item>
      <title>.profile、.bashrc、.bash_profileの違い</title>
      <link>https://rengotaku.github.io/posts/1d962586-8b1d-49d1-8f4f-dddea4e1db71/</link>
      <pubDate>Tue, 21 Jan 2020 11:14:18 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/1d962586-8b1d-49d1-8f4f-dddea4e1db71/</guid>
      <description>.profile 環境変数など # 環境変数の設定 export PATH=&amp;quot;/usr/local/opt/mysql@5.7/bin:$PATH&amp;quot; export PATH=&amp;quot;/usr/local/opt/openssl/bin:$PATH&amp;quot; export PATH=&amp;quot;~/Library/Python/3.7/bin:$PATH&amp;quot; export PATH=&amp;quot;$HOME/.nodenv/bin:$PATH&amp;quot; .bashrc エイリアス、シェルオプション、プロンプト設定 # エイリアスの設定 alias ll=&amp;#39;ls -l&amp;#39; alias relogin=&amp;#39;exec $SHELL -l&amp;#39; .bash_profile 標準出力が発生</description>
    </item>
    
    <item>
      <title>/bin/bashのオプションを設定</title>
      <link>https://rengotaku.github.io/posts/e5251869-1fec-4b07-921d-0ec288658ed3/</link>
      <pubDate>Tue, 07 Jan 2020 11:34:52 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/e5251869-1fec-4b07-921d-0ec288658ed3/</guid>
      <description>シェルスクリプトのbashの箇所にオプションを指定してデバッグなどをし易くする方法 #!/bin/bash -xe # -x シェルスクリプト内で実際に実行されたコマンドを表示</description>
    </item>
    
    <item>
      <title>ファイルを一行ずつ処理</title>
      <link>https://rengotaku.github.io/posts/fcb9faca-fcbe-4547-93c4-639f5877b4a4/</link>
      <pubDate>Tue, 24 Dec 2019 13:41:52 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/fcb9faca-fcbe-4547-93c4-639f5877b4a4/</guid>
      <description>read を使用する。 $ cat list.txt line 1 line 2 line 3 END $ while read LINE; do echo ${LINE}; done &amp;lt; ./list.txt line 1 line 2 line 3 END</description>
    </item>
    
    <item>
      <title>bash_profileに日本語を入力すると文字化けする</title>
      <link>https://rengotaku.github.io/posts/4ddbc7db-3af8-47c5-8653-e2c8c3d0a8f4/</link>
      <pubDate>Fri, 06 Dec 2019 13:03:54 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/4ddbc7db-3af8-47c5-8653-e2c8c3d0a8f4/</guid>
      <description>解決 していない。 Macの全置換で sed: RE error: illegal byte sequence が出たら - Qiita bashでUTF-8に設定して日本語表示したり使ったり。Emacsでも。 – サイバーま</description>
    </item>
    
    <item>
      <title>EC2のインスタンスをフィルタリングするスクリプト</title>
      <link>https://rengotaku.github.io/posts/98083acc-ca8c-40de-b7a8-bd20d986ea4e/</link>
      <pubDate>Mon, 11 Nov 2019 14:12:55 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/98083acc-ca8c-40de-b7a8-bd20d986ea4e/</guid>
      <description>alias hoge-ssh=&amp;#39;describe_ec2 | peco | cut -f 5 | xargs -o -n1 ssh&amp;#39; describe_ec2() { aws ec2 describe-instances | \ jq -r &amp;#39;.[][].Instances[] | [.InstanceId, [.Tags[] | select(.Key == &amp;#34;env&amp;#34;).Value][], [.Tags[] | select(.Key == &amp;#34;Name&amp;#34;).Value][], .InstanceType, .NetworkInterfaces[].PrivateIpAddress, .State.Name] | @tsv&amp;#39; } 表示する項目数に合わせて、cutのフィールドを調整する必要</description>
    </item>
    
    <item>
      <title>TOPみたいに等間隔で表示したい</title>
      <link>https://rengotaku.github.io/posts/fd5e989c-57bb-4d63-a6eb-98e4af62cac3/</link>
      <pubDate>Tue, 29 Oct 2019 11:33:14 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/fd5e989c-57bb-4d63-a6eb-98e4af62cac3/</guid>
      <description>解決 column -t を使用 $ COL=$(echo -e &amp;#34;COL1\tCOL2\tCOL3&amp;#34;) $ COL=&amp;#34;$COL\n$(echo -e &amp;#34;VAL1\tVAL2\tVAL3&amp;#34;)&amp;#34; $ COL=&amp;#34;$COL\n$(echo -e &amp;#34;VAL1\tVAL2\tVAL3&amp;#34;)&amp;#34; $ echo -e $COL | column -t COL1 COL2 COL3 VAL1 VAL2 VAL3 VAL1 VAL2 VAL3 awk - How can I format the output of a bash command in neat columns - Stack Overflow</description>
    </item>
    
    <item>
      <title>bashでタブ(\t)を取り扱うtips</title>
      <link>https://rengotaku.github.io/posts/54a4bf94-494a-445b-a229-180aea2e07a8/</link>
      <pubDate>Fri, 25 Oct 2019 11:58:26 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/54a4bf94-494a-445b-a229-180aea2e07a8/</guid>
      <description>逆引きUNIXコマンド/grepでタブを検索する方法 - Linuxと過ごす より、 $&#39;\t&#39; を指定してやればよい。 $ grep $&#39;column1\tcolumn2&#39; クォート クォート (quoting) を使うと、特定</description>
    </item>
    
    <item>
      <title>大きいファイルを圧縮して分割</title>
      <link>https://rengotaku.github.io/posts/964e6d46-42b2-4d30-be86-76e45bbff5db/</link>
      <pubDate>Fri, 18 Oct 2019 15:24:12 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/964e6d46-42b2-4d30-be86-76e45bbff5db/</guid>
      <description>パスワード付き圧縮 $ zip -e -r ps_hogedir.zip hogedir/ 【mac】zipファイル操作コマンド - Qiita 分割 $ split -b 45m ps_hogedir.zip ps_hogedir. ps_hogedir.aa ps_hogedir.ab . . . 【Mac】ファイルを指定サイズで分割/結合す</description>
    </item>
    
    <item>
      <title>macでエポックタイムのフォーマットの仕方</title>
      <link>https://rengotaku.github.io/posts/85447867-6cc2-4829-ac76-5ca8b36ffc0e/</link>
      <pubDate>Wed, 16 Oct 2019 18:16:09 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/85447867-6cc2-4829-ac76-5ca8b36ffc0e/</guid>
      <description>解決 1000 で割る。 $ date -r `expr 1553024527882 / 1000` 2019年 3月20日 水曜日 04時42分07秒 JST Bash convert epoch to date, showing wrong time - Stack Overflow 事象 macでepoctimeをdateでフォ</description>
    </item>
    
    <item>
      <title>if文ワンライナー</title>
      <link>https://rengotaku.github.io/posts/66a8ff26-6d7c-4b41-89fc-d491fc799047/</link>
      <pubDate>Wed, 04 Sep 2019 19:28:26 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/66a8ff26-6d7c-4b41-89fc-d491fc799047/</guid>
      <description>[ ${PIPESTATUS[0]} == 0 ] のように記載する $ sh -c &#39;true | tee &amp;amp;&amp;amp; [ ${PIPESTATUS[0]} == 0 ]&#39;; echo $? bashの結果の比較 [[ $? == 0 ]] 元 if [ -f ${target} ]; then echo &#39;true&#39; ;fi 簡素なif文は一行で書く - 半径5メー</description>
    </item>
    
    <item>
      <title>bashでslackに通知</title>
      <link>https://rengotaku.github.io/posts/a4f63bc9-ba1a-4b9b-9745-01ee23b7813d/</link>
      <pubDate>Tue, 27 Aug 2019 10:56:29 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/a4f63bc9-ba1a-4b9b-9745-01ee23b7813d/</guid>
      <description>解決 メイン処理 Shell/Bash script for sending slack messages. を使用する。 マッピング #!/bin/bash export APP_SLACK_WEBHOOK=&amp;quot;https://hooks.slack.com/services/XXXX&amp;quot; export APP_SLACK_CHANNEL=channel_name #export APP_SLACK_USERNAME=$(hostname) export APP_SLACK_ICON_EMOJI=&amp;quot;:hoge:&amp;quot; /usr/bin/slack &amp;quot;[$(hostname)] $(cat -)&amp;quot; 使い方 /path/to/shell.sh 2&amp;gt;&amp;amp;1 | /usr/local/bin/crontab-slack 結果 [163-44-175-179] test な感じで送信される。 note どっかで使っていたスク</description>
    </item>
    
    <item>
      <title>複数のファイルを一気に作成する</title>
      <link>https://rengotaku.github.io/posts/82df67e3-3088-4d02-8b05-e7e650a42bcd/</link>
      <pubDate>Tue, 11 Sep 2018 19:13:55 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/82df67e3-3088-4d02-8b05-e7e650a42bcd/</guid>
      <description>$ touch dir1/{file1,file2} ターミナルの作業が捗るかもな小技５つ</description>
    </item>
    
    <item>
      <title>サイトのステータスコードを定期的に記録する</title>
      <link>https://rengotaku.github.io/posts/af24431e-9837-408f-ad71-cd02fce42b42/</link>
      <pubDate>Thu, 05 Jul 2018 11:04:51 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/af24431e-9837-408f-ad71-cd02fce42b42/</guid>
      <description>watch -n30 &amp;quot;curl -LkI &#39;https://XXX&#39; -o /dev/null -w &#39;%{http_code}\n&#39; -s | xargs -L 1 -I &#39;{}&#39; date &#39;+[%Y/%m/%d %H:%M:%S] {}&#39; &amp;gt;&amp;gt; result.txt&amp;quot; -n30・・・インターバル(秒) https://XXX・・・参照先 result.txt・・・出力</description>
    </item>
    
    <item>
      <title>シェルでsudoのパスワード入力させる関数</title>
      <link>https://rengotaku.github.io/posts/329b057c-9c92-4715-8c1c-9cb69cd850d5/</link>
      <pubDate>Mon, 25 Jun 2018 12:23:14 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/329b057c-9c92-4715-8c1c-9cb69cd850d5/</guid>
      <description>password(){ if ! ${password+:} false then printf &amp;quot;password: &amp;quot; read -s password fi } Shell Scriptを書くときのテクニック10選 | κeenのHappy Hacκing Blog</description>
    </item>
    
  </channel>
</rss>
