<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on Vegetable Programing</title>
    <link>https://rengotaku.github.io/tags/react/</link>
    <description>Recent content in react on Vegetable Programing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <copyright>©2018-2020 Vegetable Programing.</copyright>
    <lastBuildDate>Wed, 22 Jan 2020 09:54:25 +0900</lastBuildDate>
    
	<atom:link href="https://rengotaku.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>React.renderのrenderファンクションが存在しない</title>
      <link>https://rengotaku.github.io/posts/360b751d-7cb8-4f74-8fb9-02b5d09107ff/</link>
      <pubDate>Wed, 22 Jan 2020 09:54:25 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/360b751d-7cb8-4f74-8fb9-02b5d09107ff/</guid>
      <description>解決 react-dom を読み込み、 ReactDOM.render で実行する。 React.render is not a function | 穀風 事象 React.renderの箇所で、 ReactDOM.render is not a function が発生する</description>
    </item>
    
    <item>
      <title>gulpでjsxコンパイル時にエラー</title>
      <link>https://rengotaku.github.io/posts/cb866f60-e70d-4e05-89b5-b37246c71c55/</link>
      <pubDate>Tue, 21 Jan 2020 20:00:07 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/cb866f60-e70d-4e05-89b5-b37246c71c55/</guid>
      <description>解決 babelifyにpresetsを設定する .transform(babelify.configure({ presets: [&amp;quot;@babel/react&amp;quot;,&amp;quot;@babel/preset-env&amp;quot;] })) React.js - webpack4で構築、jsx内でReactの記述が使えない｜teratail node.js -</description>
    </item>
    
    <item>
      <title>propsの宣言のvalueの謎の？(クエスチョンマーク)の意味</title>
      <link>https://rengotaku.github.io/posts/60eb6716-a436-4885-9b37-d288c3ce2def/</link>
      <pubDate>Mon, 20 Jan 2020 15:12:41 +0900</pubDate>
      
      <guid>https://rengotaku.github.io/posts/60eb6716-a436-4885-9b37-d288c3ce2def/</guid>
      <description>未解決 意味がわかりそうで分からない。 type A = { prop?: T } means that object can have prop of type T or do not have it at all. type B = { prop: ?T } means that object always have prop, it can be of type T or null. type C = { prop?: ?T } means</description>
    </item>
    
  </channel>
</rss>